plugins {
    id 'java'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
//    maven {
//        name = 'OSSRH'
//        url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
//    }
    mavenCentral()
}

ext {
  jLlamaVersion = 'local-test-5-SNAPSHOT'
}

dependencies {
    implementation "net.jllama:jni-bindings:${jLlamaVersion}"
    // Linux
//    implementation "net.jllama:jni-implementation:${jLlamaVersion}:linux_x64"
//    implementation "net.jllama:llama-cpp:${jLlamaVersion}:linux_x64"
//    // Mac
//    implementation "net.jllama:jni-implementation:${jLlamaVersion}:os_x_arm64"
//    implementation "net.jllama:llama-cpp:${jLlamaVersion}:os_x_arm64"
//    // Windows
//    implementation "net.jllama:jni-implementation:${jLlamaVersion}:windows_x64"
//    implementation "net.jllama:llama-cpp:${jLlamaVersion}:windows_x64"
    // non-llama deps
    implementation "org.apache.logging.log4j:log4j-core:2.22.0"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.2"
}

import static org.gradle.internal.os.OperatingSystem.current

task runProgram(type: JavaExec) {
    description = 'Runs the main program'
    group = 'application'

    dependsOn ':build'
    mainClass = 'net.jllama.llama.cpp.java.bindings.runner.Main'
    systemProperty "modelpath", System.getProperty("modelpath")
    systemProperty "loglevel", System.getProperty("loglevel")

    // Uncomment below for using custom builds of jni-implementation and llama-cpp
    final jniBuildType = 'release'
    final llamaCppBuildType = 'release'
    final bridgeRelativePath = "/build-cmake-${jniBuildType}/jni-implementation/${jniBuildType}"
    final bridgeAbsolutePath = projectDir as String + bridgeRelativePath
    systemProperty 'java.library.path', bridgeAbsolutePath
    final llamaRelativePath = "/build-cmake-${llamaCppBuildType}/llama/${llamaCppBuildType}"
    final String llamaAbsolutePath = projectDir as String + llamaRelativePath
    final dllPath = current().isWindows() ? 'PATH' :
            current().isMacOsX() ? 'DYLD_LIBRARY_PATH' : 'LD_LIBRARY_PATH'
    final envVariableValue = System.getenv(dllPath) ? System.getenv(dllPath) : ''
    environment dllPath, "${envVariableValue}${File.pathSeparator}${llamaAbsolutePath}"

    doFirst {
        classpath = files(sourceSets.main.runtimeClasspath)
    }
}
